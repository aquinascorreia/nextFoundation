{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\Prudence\\\\Desktop\\\\Foundation\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../components/Layout';\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\nimport css from '../css/styles.scss';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\n\nvar PostLink = function PostLink(props) {\n  return __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: \"/p/[id]\",\n    as: \"/p/\".concat(props.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, props.title)));\n};\n\nvar Index = function Index(props) {\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: css.example,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"Hello Next.js\"), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"My blog\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, __jsx(PostLink, {\n    id: \"hello-nextjs\",\n    title: \"Hello nextjs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }), __jsx(PostLink, {\n    id: \"learn-nextjs\",\n    title: \"Learn nextjs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }), __jsx(PostLink, {\n    id: \"deploy-nextjs\",\n    title: \"Deploy nextjs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  })), __jsx(ButtonToolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, __jsx(Button, {\n    variant: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Primary\")), __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Fetching data from external API\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, props.msgs.map(function (mg) {\n    return __jsx(\"li\", {\n      key: mg.UniqueMessageId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: \"/p/[id]\",\n      as: \"/p/\".concat(mg.UniqueMessageId),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, mg.UniqueMessageId)));\n  })));\n};\n\nIndex.getInitialProps = function _callee() {\n  var account_token, user_token, groupid, profileid, res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          account_token = 'PT8YzkMO74fPqt8GoAD0+5EpkAdH6WTJ';\n          user_token = 'gzSRj2TyEhnPqt8GoAD0+wymZArbWes0';\n          groupid = '1560761320';\n          profileid = '362460000';\n          res = '';\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(fetch('http://api.konnectinsights.com/v2.0/SocialMessages/Twitter?account_token=' + account_token + '&groupid=' + groupid + '&user_token=' + user_token + '&profileid=' + profileid + '&since=2020-01-11%2000:00:00&until=2020-01-17%2023:59:59&resultType=json&limit=2&sortby=date&sort=desc'));\n\n        case 7:\n          res = _context.sent;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 10:\n          data = _context.sent;\n          return _context.abrupt(\"return\", {\n            msgs: data.docs\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/Prudence/Desktop/Foundation/pages/index.js"],"names":["Layout","Link","fetch","css","ButtonToolbar","PostLink","props","id","title","Index","example","msgs","map","mg","UniqueMessageId","getInitialProps","account_token","user_token","groupid","profileid","res","json","data","docs"],"mappings":"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","sourcesContent":["import Layout from '../components/Layout';\r\nimport Link from 'next/link'\r\nimport fetch from 'isomorphic-unfetch'\r\nimport css from '../css/styles.scss'\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar'\r\n\r\nconst PostLink = props => (\r\n    <li>\r\n        <Link href=\"/p/[id]\" as = {`/p/${props.id}`}>\r\n            <a>{props.title}</a>\r\n        </Link>\r\n    </li>\r\n);\r\n\r\nconst Index = props => (\r\n        <Layout>\r\n            <p className={css.example}>Hello Next.js</p>\r\n            <h1>My blog</h1>\r\n            <ul>\r\n                <PostLink id=\"hello-nextjs\" title=\"Hello nextjs\" />\r\n                <PostLink id=\"learn-nextjs\" title=\"Learn nextjs\" />\r\n                <PostLink id=\"deploy-nextjs\" title=\"Deploy nextjs\" />\r\n            </ul>   \r\n            <ButtonToolbar>\r\n                <Button variant=\"primary\">Primary</Button>\r\n            </ButtonToolbar>\r\n            <h2>Fetching data from external API</h2>\r\n                <ul>\r\n                    {props.msgs.map(mg => (\r\n                        <li key= {mg.UniqueMessageId}>\r\n\r\n                            <Link href=\"/p/[id]\" as={`/p/${mg.UniqueMessageId}`}>\r\n                                <a>{mg.UniqueMessageId}</a>\r\n                            </Link>\r\n                        </li>\r\n                    ))}\r\n                    \r\n                </ul>\r\n        </Layout>\r\n);\r\n\r\nIndex.getInitialProps = async function() {\r\n    const account_token = 'PT8YzkMO74fPqt8GoAD0+5EpkAdH6WTJ';\r\n    const user_token =  'gzSRj2TyEhnPqt8GoAD0+wymZArbWes0';\r\n    const groupid = '1560761320';\r\n    const profileid = '362460000';\r\n    let res = '';\r\n    \r\n    res = await fetch('http://api.konnectinsights.com/v2.0/SocialMessages/Twitter?account_token='+ account_token + '&groupid='+ groupid+ '&user_token=' + user_token + '&profileid='+ profileid+'&since=2020-01-11%2000:00:00&until=2020-01-17%2023:59:59&resultType=json&limit=2&sortby=date&sort=desc');\r\n    \r\n    const data = await res.json();\r\n    //console.log(data.docs);\r\n    //console.log(`msgs data fetched. Count : ${data.docs.length}`);\r\n    return {\r\n        msgs: data.docs\r\n    };\r\n};\r\n\r\nexport default Index\r\n"]},"metadata":{},"sourceType":"module"}